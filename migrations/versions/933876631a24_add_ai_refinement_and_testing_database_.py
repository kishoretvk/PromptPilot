"""Add AI refinement and testing database models

Revision ID: 933876631a24
Revises: 35e80e2271a7
Create Date: 2025-09-15 19:28:48.327850

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '933876631a24'
down_revision = '35e80e2271a7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('llm_providers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('provider_type', sa.String(length=50), nullable=False),
    sa.Column('base_url', sa.String(length=500), nullable=True),
    sa.Column('api_key_encrypted', sa.Text(), nullable=True),
    sa.Column('models', sa.JSON(), nullable=False),
    sa.Column('configuration', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_llm_provider_active', 'llm_providers', ['is_active'], unique=False)
    op.create_index('idx_llm_provider_type', 'llm_providers', ['provider_type'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_refresh_token'), 'sessions', ['refresh_token'], unique=True)
    op.create_index(op.f('ix_sessions_session_token'), 'sessions', ['session_token'], unique=True)
    op.create_table('usage_metrics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('metric_type', sa.String(length=100), nullable=False),
    sa.Column('metric_name', sa.String(length=255), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('dimensions', sa.JSON(), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('hour', sa.Integer(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_usage_metric_date_hour', 'usage_metrics', ['date', 'hour'], unique=False)
    op.create_index('idx_usage_metric_type_date', 'usage_metrics', ['metric_type', 'date'], unique=False)
    op.create_index('idx_usage_metric_user_date', 'usage_metrics', ['user_id', 'date'], unique=False)
    op.create_index(op.f('ix_usage_metrics_date'), 'usage_metrics', ['date'], unique=False)
    op.create_index(op.f('ix_usage_metrics_hour'), 'usage_metrics', ['hour'], unique=False)
    op.create_index(op.f('ix_usage_metrics_metric_name'), 'usage_metrics', ['metric_name'], unique=False)
    op.create_index(op.f('ix_usage_metrics_metric_type'), 'usage_metrics', ['metric_type'], unique=False)
    op.create_table('pipeline_executions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('executor_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='pipelinestatus'), nullable=False),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('completed_steps', sa.Integer(), nullable=False),
    sa.Column('failed_steps', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('total_cost', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['executor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pipeline_execution_executor', 'pipeline_executions', ['executor_id'], unique=False)
    op.create_index('idx_pipeline_execution_pipeline', 'pipeline_executions', ['pipeline_id'], unique=False)
    op.create_index('idx_pipeline_execution_started', 'pipeline_executions', ['started_at'], unique=False)
    op.create_index('idx_pipeline_execution_status', 'pipeline_executions', ['status'], unique=False)
    op.create_table('pipeline_steps',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('step_type', sa.String(length=50), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=False),
    sa.Column('position', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('pipeline_id', 'order', name='uq_pipeline_step_order')
    )
    op.create_index('idx_pipeline_step_pipeline', 'pipeline_steps', ['pipeline_id'], unique=False)
    op.create_index('idx_pipeline_step_prompt', 'pipeline_steps', ['prompt_id'], unique=False)
    op.create_table('prompt_executions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=False),
    sa.Column('executor_id', sa.UUID(), nullable=False),
    sa.Column('input_variables', sa.JSON(), nullable=False),
    sa.Column('response', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('model_name', sa.String(length=100), nullable=True),
    sa.Column('model_parameters', sa.JSON(), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('executed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['executor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_prompt_execution_executed', 'prompt_executions', ['executed_at'], unique=False)
    op.create_index('idx_prompt_execution_executor', 'prompt_executions', ['executor_id'], unique=False)
    op.create_index('idx_prompt_execution_prompt', 'prompt_executions', ['prompt_id'], unique=False)
    op.create_index('idx_prompt_execution_status', 'prompt_executions', ['status'], unique=False)
    op.create_table('pipeline_connections',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('source_step_id', sa.UUID(), nullable=False),
    sa.Column('target_step_id', sa.UUID(), nullable=False),
    sa.Column('connection_type', sa.String(length=50), nullable=False),
    sa.Column('configuration', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], ),
    sa.ForeignKeyConstraint(['source_step_id'], ['pipeline_steps.id'], ),
    sa.ForeignKeyConstraint(['target_step_id'], ['pipeline_steps.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_step_id', 'target_step_id', name='uq_pipeline_connection')
    )
    op.create_index('idx_pipeline_connection_pipeline', 'pipeline_connections', ['pipeline_id'], unique=False)
    op.create_table('step_executions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pipeline_execution_id', sa.UUID(), nullable=False),
    sa.Column('step_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['pipeline_execution_id'], ['pipeline_executions.id'], ),
    sa.ForeignKeyConstraint(['step_id'], ['pipeline_steps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_step_execution_pipeline', 'step_executions', ['pipeline_execution_id'], unique=False)
    op.create_index('idx_step_execution_status', 'step_executions', ['status'], unique=False)
    op.create_index('idx_step_execution_step', 'step_executions', ['step_id'], unique=False)
    op.drop_table('executions')
    op.add_column('api_keys', sa.Column('key_prefix', sa.String(length=10), nullable=False))
    op.add_column('api_keys', sa.Column('permissions', sa.JSON(), nullable=False))
    op.add_column('api_keys', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('api_keys', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('api_keys', 'user_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.drop_column('api_keys', 'rate_limit')
    op.alter_column('audit_logs', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.create_index('idx_audit_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_timestamp', 'audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_user_action', 'audit_logs', ['user_id', 'action'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_request_id'), 'audit_logs', ['request_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_id'), 'audit_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.add_column('pipelines', sa.Column('max_retries', sa.Integer(), nullable=False))
    op.add_column('pipelines', sa.Column('timeout_minutes', sa.Integer(), nullable=False))
    op.add_column('pipelines', sa.Column('creator_id', sa.UUID(), nullable=False))
    op.alter_column('pipelines', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('pipelines', 'description',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('pipelines', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('DRAFT', 'ACTIVE', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='pipelinestatus'),
               nullable=False)
    op.alter_column('pipelines', 'error_strategy',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               nullable=False)
    op.create_index('idx_pipeline_created', 'pipelines', ['created_at'], unique=False)
    op.create_index('idx_pipeline_creator', 'pipelines', ['creator_id'], unique=False)
    op.create_index('idx_pipeline_status', 'pipelines', ['status'], unique=False)
    op.drop_constraint(None, 'pipelines', type_='foreignkey')
    op.create_foreign_key(None, 'pipelines', 'users', ['creator_id'], ['id'])
    op.drop_column('pipelines', 'version')
    op.drop_column('pipelines', 'total_cost')
    op.drop_column('pipelines', 'configuration')
    op.drop_column('pipelines', 'steps')
    op.drop_column('pipelines', 'tags')
    op.drop_column('pipelines', 'avg_execution_time')
    op.drop_column('pipelines', 'success_rate')
    op.drop_column('pipelines', 'execution_count')
    op.drop_column('pipelines', 'owner_id')
    op.add_column('prompt_versions', sa.Column('commit_message', sa.Text(), nullable=True))
    op.add_column('prompt_versions', sa.Column('changes_summary', sa.Text(), nullable=True))
    op.add_column('prompt_versions', sa.Column('parent_version_id', sa.UUID(), nullable=True))
    op.add_column('prompt_versions', sa.Column('tags', sa.JSON(), nullable=False))
    op.add_column('prompt_versions', sa.Column('merged_from_version_id', sa.UUID(), nullable=True))
    op.add_column('prompt_versions', sa.Column('is_merge', sa.Boolean(), nullable=True))
    op.alter_column('prompt_versions', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('prompt_versions', 'prompt_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('prompt_versions', 'created_by',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               nullable=False)
    op.create_index('idx_prompt_version_active', 'prompt_versions', ['is_active'], unique=False)
    op.create_index('idx_prompt_version_created', 'prompt_versions', ['created_at'], unique=False)
    op.create_index('idx_prompt_version_merge', 'prompt_versions', ['merged_from_version_id'], unique=False)
    op.create_index('idx_prompt_version_parent', 'prompt_versions', ['parent_version_id'], unique=False)
    op.create_index('idx_prompt_version_prompt', 'prompt_versions', ['prompt_id'], unique=False)
    op.create_unique_constraint('uq_prompt_version', 'prompt_versions', ['prompt_id', 'version'])
    op.create_foreign_key(None, 'prompt_versions', 'prompt_versions', ['merged_from_version_id'], ['id'])
    op.create_foreign_key(None, 'prompt_versions', 'prompt_versions', ['parent_version_id'], ['id'])
    op.drop_column('prompt_versions', 'changelog')
    op.add_column('prompts', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('prompts', sa.Column('provider_id', sa.UUID(), nullable=True))
    op.add_column('prompts', sa.Column('test_cases', sa.JSON(), nullable=False))
    op.add_column('prompts', sa.Column('evaluation_metrics', sa.JSON(), nullable=False))
    op.add_column('prompts', sa.Column('creator_id', sa.UUID(), nullable=False))
    op.alter_column('prompts', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('prompts', 'description',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('prompts', 'tags',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('prompts', 'version',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('prompts', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('DRAFT', 'ACTIVE', 'ARCHIVED', 'DEPRECATED', name='promptstatus'),
               nullable=False)
    op.alter_column('prompts', 'input_variables',
               existing_type=sqlite.JSON(),
               nullable=False)
    op.alter_column('prompts', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('prompts', 'parameters',
               existing_type=sqlite.JSON(),
               nullable=False)
    op.create_index('idx_prompt_created', 'prompts', ['created_at'], unique=False)
    op.create_index('idx_prompt_creator', 'prompts', ['creator_id'], unique=False)
    op.create_index('idx_prompt_provider', 'prompts', ['provider_id'], unique=False)
    op.create_index('idx_prompt_status', 'prompts', ['status'], unique=False)
    op.create_index('idx_prompt_task_type', 'prompts', ['task_type'], unique=False)
    op.create_index(op.f('ix_prompts_task_type'), 'prompts', ['task_type'], unique=False)
    op.drop_constraint(None, 'prompts', type_='foreignkey')
    op.create_foreign_key(None, 'prompts', 'users', ['creator_id'], ['id'])
    op.create_foreign_key(None, 'prompts', 'llm_providers', ['provider_id'], ['id'])
    op.drop_column('prompts', 'total_cost')
    op.drop_column('prompts', 'model_provider')
    op.drop_column('prompts', 'avg_execution_time')
    op.drop_column('prompts', 'success_rate')
    op.drop_column('prompts', 'execution_count')
    op.drop_column('prompts', 'owner_id')
    op.add_column('settings', sa.Column('is_sensitive', sa.Boolean(), nullable=False))
    op.add_column('settings', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('settings', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('settings', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.alter_column('settings', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('settings', 'category',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('settings', 'key',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('settings', 'value',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('settings', 'description',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint(op.f('unique_key_per_user'), 'settings', type_='unique')
    op.create_index('idx_setting_category', 'settings', ['category'], unique=False)
    op.create_index(op.f('ix_settings_category'), 'settings', ['category'], unique=False)
    op.create_unique_constraint('uq_setting_category_key', 'settings', ['category', 'key'])
    op.drop_constraint(None, 'settings', type_='foreignkey')
    op.create_foreign_key(None, 'settings', 'users', ['updated_by'], ['id'])
    op.drop_column('settings', 'user_id')
    op.drop_column('settings', 'is_public')
    op.add_column('users', sa.Column('role', sa.Enum('ADMIN', 'USER', 'VIEWER', name='userrole'), nullable=False))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column('users', 'is_superuser')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_superuser', sa.BOOLEAN(), nullable=True))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'role')
    op.add_column('settings', sa.Column('is_public', sa.BOOLEAN(), nullable=True))
    op.add_column('settings', sa.Column('user_id', sa.VARCHAR(), nullable=True))
    op.drop_constraint(None, 'settings', type_='foreignkey')
    op.create_foreign_key(None, 'settings', 'users', ['user_id'], ['id'])
    op.drop_constraint('uq_setting_category_key', 'settings', type_='unique')
    op.drop_index(op.f('ix_settings_category'), table_name='settings')
    op.drop_index('idx_setting_category', table_name='settings')
    op.create_unique_constraint(op.f('unique_key_per_user'), 'settings', ['key', 'user_id'])
    op.alter_column('settings', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('settings', 'value',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('settings', 'key',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('settings', 'category',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('settings', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('settings', 'updated_by')
    op.drop_column('settings', 'updated_at')
    op.drop_column('settings', 'created_at')
    op.drop_column('settings', 'is_sensitive')
    op.add_column('prompts', sa.Column('owner_id', sa.VARCHAR(), nullable=False))
    op.add_column('prompts', sa.Column('execution_count', sa.INTEGER(), nullable=True))
    op.add_column('prompts', sa.Column('success_rate', sa.FLOAT(), nullable=True))
    op.add_column('prompts', sa.Column('avg_execution_time', sa.FLOAT(), nullable=True))
    op.add_column('prompts', sa.Column('model_provider', sa.VARCHAR(length=100), nullable=False))
    op.add_column('prompts', sa.Column('total_cost', sa.FLOAT(), nullable=True))
    op.drop_constraint(None, 'prompts', type_='foreignkey')
    op.drop_constraint(None, 'prompts', type_='foreignkey')
    op.create_foreign_key(None, 'prompts', 'users', ['owner_id'], ['id'])
    op.drop_index(op.f('ix_prompts_task_type'), table_name='prompts')
    op.drop_index('idx_prompt_task_type', table_name='prompts')
    op.drop_index('idx_prompt_status', table_name='prompts')
    op.drop_index('idx_prompt_provider', table_name='prompts')
    op.drop_index('idx_prompt_creator', table_name='prompts')
    op.drop_index('idx_prompt_created', table_name='prompts')
    op.alter_column('prompts', 'parameters',
               existing_type=sqlite.JSON(),
               nullable=True)
    op.alter_column('prompts', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('prompts', 'input_variables',
               existing_type=sqlite.JSON(),
               nullable=True)
    op.alter_column('prompts', 'status',
               existing_type=sa.Enum('DRAFT', 'ACTIVE', 'ARCHIVED', 'DEPRECATED', name='promptstatus'),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('prompts', 'version',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('prompts', 'tags',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('prompts', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=True)
    op.alter_column('prompts', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('prompts', 'creator_id')
    op.drop_column('prompts', 'evaluation_metrics')
    op.drop_column('prompts', 'test_cases')
    op.drop_column('prompts', 'provider_id')
    op.drop_column('prompts', 'is_active')
    op.add_column('prompt_versions', sa.Column('changelog', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'prompt_versions', type_='foreignkey')
    op.drop_constraint(None, 'prompt_versions', type_='foreignkey')
    op.drop_constraint('uq_prompt_version', 'prompt_versions', type_='unique')
    op.drop_index('idx_prompt_version_prompt', table_name='prompt_versions')
    op.drop_index('idx_prompt_version_parent', table_name='prompt_versions')
    op.drop_index('idx_prompt_version_merge', table_name='prompt_versions')
    op.drop_index('idx_prompt_version_created', table_name='prompt_versions')
    op.drop_index('idx_prompt_version_active', table_name='prompt_versions')
    op.alter_column('prompt_versions', 'created_by',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('prompt_versions', 'prompt_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('prompt_versions', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('prompt_versions', 'is_merge')
    op.drop_column('prompt_versions', 'merged_from_version_id')
    op.drop_column('prompt_versions', 'tags')
    op.drop_column('prompt_versions', 'parent_version_id')
    op.drop_column('prompt_versions', 'changes_summary')
    op.drop_column('prompt_versions', 'commit_message')
    op.add_column('pipelines', sa.Column('owner_id', sa.VARCHAR(), nullable=False))
    op.add_column('pipelines', sa.Column('execution_count', sa.INTEGER(), nullable=True))
    op.add_column('pipelines', sa.Column('success_rate', sa.FLOAT(), nullable=True))
    op.add_column('pipelines', sa.Column('avg_execution_time', sa.FLOAT(), nullable=True))
    op.add_column('pipelines', sa.Column('tags', sa.TEXT(), nullable=True))
    op.add_column('pipelines', sa.Column('steps', sqlite.JSON(), nullable=True))
    op.add_column('pipelines', sa.Column('configuration', sqlite.JSON(), nullable=True))
    op.add_column('pipelines', sa.Column('total_cost', sa.FLOAT(), nullable=True))
    op.add_column('pipelines', sa.Column('version', sa.VARCHAR(length=50), nullable=True))
    op.drop_constraint(None, 'pipelines', type_='foreignkey')
    op.create_foreign_key(None, 'pipelines', 'users', ['owner_id'], ['id'])
    op.drop_index('idx_pipeline_status', table_name='pipelines')
    op.drop_index('idx_pipeline_creator', table_name='pipelines')
    op.drop_index('idx_pipeline_created', table_name='pipelines')
    op.alter_column('pipelines', 'error_strategy',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('pipelines', 'status',
               existing_type=sa.Enum('DRAFT', 'ACTIVE', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='pipelinestatus'),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('pipelines', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=True)
    op.alter_column('pipelines', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('pipelines', 'creator_id')
    op.drop_column('pipelines', 'timeout_minutes')
    op.drop_column('pipelines', 'max_retries')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_request_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_index('idx_audit_user_action', table_name='audit_logs')
    op.drop_index('idx_audit_timestamp', table_name='audit_logs')
    op.drop_index('idx_audit_resource', table_name='audit_logs')
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.add_column('api_keys', sa.Column('rate_limit', sa.INTEGER(), nullable=True))
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('api_keys', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('api_keys', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('api_keys', 'updated_at')
    op.drop_column('api_keys', 'permissions')
    op.drop_column('api_keys', 'key_prefix')
    op.create_table('executions',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('pipeline_id', sa.VARCHAR(), nullable=True),
    sa.Column('prompt_id', sa.VARCHAR(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=True),
    sa.Column('input_data', sqlite.JSON(), nullable=True),
    sa.Column('output_data', sqlite.JSON(), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('started_at', sa.DATETIME(), nullable=True),
    sa.Column('completed_at', sa.DATETIME(), nullable=True),
    sa.Column('execution_time', sa.FLOAT(), nullable=True),
    sa.Column('total_cost', sa.FLOAT(), nullable=True),
    sa.Column('user_id', sa.VARCHAR(), nullable=False),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('idx_step_execution_step', table_name='step_executions')
    op.drop_index('idx_step_execution_status', table_name='step_executions')
    op.drop_index('idx_step_execution_pipeline', table_name='step_executions')
    op.drop_table('step_executions')
    op.drop_index('idx_pipeline_connection_pipeline', table_name='pipeline_connections')
    op.drop_table('pipeline_connections')
    op.drop_index('idx_prompt_execution_status', table_name='prompt_executions')
    op.drop_index('idx_prompt_execution_prompt', table_name='prompt_executions')
    op.drop_index('idx_prompt_execution_executor', table_name='prompt_executions')
    op.drop_index('idx_prompt_execution_executed', table_name='prompt_executions')
    op.drop_table('prompt_executions')
    op.drop_index('idx_pipeline_step_prompt', table_name='pipeline_steps')
    op.drop_index('idx_pipeline_step_pipeline', table_name='pipeline_steps')
    op.drop_table('pipeline_steps')
    op.drop_index('idx_pipeline_execution_status', table_name='pipeline_executions')
    op.drop_index('idx_pipeline_execution_started', table_name='pipeline_executions')
    op.drop_index('idx_pipeline_execution_pipeline', table_name='pipeline_executions')
    op.drop_index('idx_pipeline_execution_executor', table_name='pipeline_executions')
    op.drop_table('pipeline_executions')
    op.drop_index(op.f('ix_usage_metrics_metric_type'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_metric_name'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_hour'), table_name='usage_metrics')
    op.drop_index(op.f('ix_usage_metrics_date'), table_name='usage_metrics')
    op.drop_index('idx_usage_metric_user_date', table_name='usage_metrics')
    op.drop_index('idx_usage_metric_type_date', table_name='usage_metrics')
    op.drop_index('idx_usage_metric_date_hour', table_name='usage_metrics')
    op.drop_table('usage_metrics')
    op.drop_index(op.f('ix_sessions_session_token'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_refresh_token'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_llm_provider_type', table_name='llm_providers')
    op.drop_index('idx_llm_provider_active', table_name='llm_providers')
    op.drop_table('llm_providers')
    # ### end Alembic commands ###