# PromptPilot Production Docker Compose Configuration
version: '3.8'

services:
  # ================================
  # Database Services
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: promptpilot-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-promptpilot}
      POSTGRES_USER: ${POSTGRES_USER:-promptpilot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-promptpilot_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - promptpilot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-promptpilot_user} -d ${POSTGRES_DB:-promptpilot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: promptpilot-redis
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - promptpilot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ================================
  # Backend Services
  # ================================
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: promptpilot-backend
    environment:
      # Application Settings
      APP_NAME: ${APP_NAME:-PromptPilot}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY}
      
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-promptpilot_user}:${POSTGRES_PASSWORD:-promptpilot_secure_password}@postgres:5432/${POSTGRES_DB:-promptpilot}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # Security Settings
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:3000", "http://localhost:3001"]}
      
      # LLM Provider API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      HUGGINGFACE_API_TOKEN: ${HUGGINGFACE_API_TOKEN:-}
      
      # Celery Configuration
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      CELERY_TASK_SERIALIZER: json
      CELERY_RESULT_SERIALIZER: json
      CELERY_ACCEPT_CONTENT: json
      CELERY_TASK_TRACK_STARTED: true
      CELERY_TIMEZONE: UTC
      CELERY_ENABLE_UTC: true
      
      # Monitoring
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
      PROMETHEUS_PORT: ${PROMETHEUS_PORT:-8001}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # Email Configuration
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_data:/app/data
      - ./migrations:/app/migrations  # For running migrations
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics
      - "5555:5555"  # Celery Flower (monitoring)
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - promptpilot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker for Async Tasks (e.g., long refinements, AB tests)
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
      target: celery-worker
    container_name: promptpilot-celery-worker
    command: celery -A tasks.celery worker --loglevel=info
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      DATABASE_URL: postgresql://${POSTGRES_USER:-promptpilot_user}:${POSTGRES_PASSWORD:-promptpilot_secure_password}@postgres:5432/${POSTGRES_DB:-promptpilot}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - promptpilot-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
      target: celery-beat
    container_name: promptpilot-celery-beat
    command: celery -A tasks.celery beat --loglevel=info
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
    volumes:
      - app_logs:/app/logs
    depends_on:
      - backend
      - redis
    networks:
      - promptpilot-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # ================================
  # Frontend Services
  # ================================
  frontend:
    build:
      context: ./ui/dashboard
      dockerfile: Dockerfile.simple
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://backend:8000/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://backend:8000/ws}
        REACT_APP_SENTRY_DSN: ${REACT_APP_SENTRY_DSN:-}
        REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT:-production}
    container_name: promptpilot-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - promptpilot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ================================
  # Monitoring Services
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: promptpilot-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - promptpilot-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: promptpilot-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_USERS_ALLOW_SIGN_UP: ${GRAFANA_ALLOW_SIGNUP:-false}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - promptpilot-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # Reverse Proxy (Production)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: promptpilot-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - promptpilot-network
    restart: unless-stopped
    profiles:
      - production

  # ================================
  # Backup Service
  # ================================
  backup:
    image: postgres:15-alpine
    container_name: promptpilot-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-promptpilot_secure_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c '
        while true; do
          echo "Running backup at $$(date)"
          /backup.sh
          echo "Backup completed. Next backup in 24 hours."
          sleep 86400
        done
      '
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - promptpilot-network
    restart: unless-stopped
    profiles:
      - backup

  # ================================
  # Celery Flower (Task Monitoring)
  # ================================
  flower:
    image: mher/flower:latest
    container_name: promptpilot-flower
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
    ports:
      - "5556:5555"
    depends_on:
      - backend
      - redis
    networks:
      - promptpilot-network
    restart: unless-stopped
    profiles:
      - monitoring

# ================================
# Networks
# ================================
networks:
  promptpilot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
