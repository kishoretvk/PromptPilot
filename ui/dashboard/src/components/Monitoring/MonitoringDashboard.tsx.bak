import React, { useState, useMemo } from 'react';
import {
  Box,
  Typography,
  Tabs,
  Tab,
  Card,
  CardContent,
  Grid,
  Chip,
  Button,
  useTheme,
  useMediaQuery,
  CircularProgress,
  Alert,
  Snackbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
} from '@mui/material';
import {
  Check as CheckIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  Speed as SpeedIcon,
  Memory as MemoryIcon,
  People as PeopleIcon,
  Refresh as RefreshIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  TrendingFlat as TrendingFlatIcon,
} from '@mui/icons-material';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { format, subHours, subDays } from 'date-fns';
import { useMonitoringData, useAlerts, useSystemHealth } from '../hooks/useMonitoring';
import { Alert as AlertType, SystemHealth } from '../types/Monitoring';
import apiClient from '../services/api';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`monitoring-tabpanel-${index}`}
      aria-labelledby={`monitoring-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

function a11yProps(index: number) {
  return {
    id: `monitoring-tab-${index}`,
    'aria-controls': `monitoring-tabpanel-${index}`,
  };
}

const MonitoringDashboard: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [activeTab, setActiveTab] = useState(0);
  const [timeRange, setTimeRange] = useState('24h');
  const [selectedAlert, setSelectedAlert] = useState<AlertType | null>(null);

  const { data: monitoringData, isLoading: dataLoading, refetch: refetchData } = useMonitoringData(timeRange);
  const { data: alerts, isLoading: alertsLoading, refetch: refetchAlerts } = useAlerts();
  const { data: systemHealth, isLoading: healthLoading, refetch: refetchHealth } = useSystemHealth();

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleRefresh = () => {
    refetchData();
    refetchAlerts();
    refetchHealth();
  };

  // System health cards data
  const healthCards = useMemo(() => {
    if (!systemHealth) return [];
    
    return [
      {
        title: 'System Status',
        value: systemHealth.status,
        icon: systemHealth.status === 'healthy' ? <CheckIcon /> : 
              systemHealth.status === 'degraded' ? <WarningIcon /> : <ErrorIcon />,
        color: systemHealth.status === 'healthy' ? 'success' : 
               systemHealth.status === 'degraded' ? 'warning' : 'error',
        trend: systemHealth.trend
      },
      {
        title: 'CPU Usage',
        value: `${systemHealth.cpu.usage.toFixed(1)}%`,
        icon: <SpeedIcon />,
        color: systemHealth.cpu.usage > 80 ? 'error' : 
               systemHealth.cpu.usage > 60 ? 'warning' : 'success',
        trend: systemHealth.cpu.trend
      },
      {
        title: 'Memory Usage',
        value: `${systemHealth.memory.utilization.toFixed(1)}%`,
        icon: <MemoryIcon />,
        color: systemHealth.memory.utilization > 85 ? 'error' : 
               systemHealth.memory.utilization > 70 ? 'warning' : 'success',
        trend: systemHealth.memory.trend
      },
      {
        title: 'Active Users',
        value: systemHealth.activeUsers.toString(),
        icon: <PeopleIcon />,
        color: 'info',
        trend: systemHealth.usersTrend
      }
    ];
  }, [systemHealth]);

  // Alert distribution chart data
  const alertDistributionData = useMemo(() => {
    if (!alerts) return { labels: [], datasets: [] };
    
    const priorityCounts = {
      P0: 0,
      P1: 0,
      P2: 0,
      P3: 0
    };
    
    alerts.forEach(alert => {
      priorityCounts[alert.priority as keyof typeof priorityCounts]++;
    });
    
    return {
      labels: ['Critical (P0)', 'High (P1)', 'Medium (P2)', 'Low (P3)'],
      datasets: [
        {
          data: [
            priorityCounts.P0,
            priorityCounts.P1,
            priorityCounts.P2,
            priorityCounts.P3
          ],
          backgroundColor: [
            theme.palette.error.main,
            theme.palette.warning.main,
            theme.palette.info.main,
            theme.palette.success.main
          ],
          borderColor: [
            theme.palette.error.dark,
            theme.palette.warning.dark,
            theme.palette.info.dark,
            theme.palette.success.dark
          ],
          borderWidth: 1,
        },
      ],
    };
  }, [alerts, theme]);

  // Performance chart data
  const performanceData = useMemo(() => {
    if (!monitoringData?.performance) return { labels: [], datasets: [] };
    
    const labels = monitoringData.performance.map(item => 
      format(new Date(item.timestamp), 'HH:mm')
    );
    
    return {
      labels,
      datasets: [
        {
          label: 'Response Time (ms)',
          data: monitoringData.performance.map(item => item.responseTime),
          borderColor: theme.palette.primary.main,
          backgroundColor: theme.palette.primary.light,
          fill: true,
        },
        {
          label: 'Error Rate (%)',
          data: monitoringData.performance.map(item => item.errorRate * 100),
          borderColor: theme.palette.error.main,
          backgroundColor: theme.palette.error.light,
          fill: true,
        }
      ]
    };
  }, [monitoringData, theme]);

  // Resource usage chart data
  const resourceData = useMemo(() => {
    if (!monitoringData?.resources) return { labels: [], datasets: [] };
    
    const labels = monitoringData.resources.map(item => 
      format(new Date(item.timestamp), 'HH:mm')
    );
    
    return {
      labels,
      datasets: [
        {
          label: 'CPU Usage (%)',
          data: monitoringData.resources.map(item => item.cpu.usage),
          borderColor: theme.palette.info.main,
          backgroundColor: theme.palette.info.light,
        },
        {
          label: 'Memory Usage (%)',
          data: monitoringData.resources.map(item => item.memory.utilization),
          borderColor: theme.palette.warning.main,
          backgroundColor: theme.palette.warning.light,
        }
      ]
    };
  }, [monitoringData, theme]);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'P0': return 'error';
      case 'P1': return 'warning';
      case 'P2': return 'info';
      case 'P3': return 'success';
      default: return 'default';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'P0': return <ErrorIcon />;
      case 'P1': return <WarningIcon />;
      case 'P2': return <InfoIcon />;
      case 'P3': return <CheckIcon />;
      default: return <InfoIcon />;
    }
  };

  return (
    <Container maxWidth="xl">
      <Box sx={{ py: 3 }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box>
            <Typography variant="h4" component="h1" gutterBottom>
              System Monitoring
            </Typography>
            <Typography variant="subtitle1" color="text.secondary">
              Real-time monitoring of system health, performance, and alerts
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <IconButton onClick={handleRefresh} size="large">
              <RefreshIcon />
            </IconButton>
          </Box>
        </Box>

        {/* System Health Overview */}
        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(4, 1fr)' }, gap: 3, mb: 4 }}>
          {healthCards.map((card, index) => (
            <Box key={index}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Box>
                      <Typography variant="h6" gutterBottom>
                        {card.title}
                      </Typography>
                      <Typography variant="h4" component="div" color={`${card.color}.main`}>
                        {card.value}
                      </Typography>
                    </Box>
                    <Box sx={{ 
                      p: 1, 
                      borderRadius: '50%', 
                      bgcolor: `${card.color}.light`, 
                      color: `${card.color}.main` 
                    }}>
                      {card.icon}
                    </Box>
                  </Box>
                  {card.trend && (
                    <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                      {card.trend > 0 ? <UpIcon color="error" /> : <DownIcon color="success" />}
                      <Typography variant="body2" color={card.trend > 0 ? 'error.main' : 'success.main'}>
                        {Math.abs(card.trend)}% {card.trend > 0 ? 'increase' : 'decrease'}
                      </Typography>
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>
          ))}
        </Box>

        {/* Navigation Tabs */}
        <Paper 
          elevation={0} 
          sx={{ 
            borderBottom: 1, 
            borderColor: 'divider', 
            mb: 3, 
            borderRadius: 2, 
            overflow: 'hidden' 
          }}
        >
          <Tabs
            value={activeTab}
            onChange={handleTabChange}
            aria-label="monitoring tabs"
            variant={isMobile ? 'fullWidth' : 'standard'}
            sx={{
              '& .MuiTab-root': {
                minHeight: 64,
                textTransform: 'none',
                fontSize: '0.95rem',
                fontWeight: 500,
              },
            }}
          >
            <Tab label="Overview" icon={<TimelineIcon />} iconPosition="start" {...a11yProps(0)} />
            <Tab label="Alerts" icon={<NotificationsIcon />} iconPosition="start" {...a11yProps(1)} />
            <Tab label="Performance" icon={<SpeedIcon />} iconPosition="start" {...a11yProps(2)} />
            <Tab label="Resources" icon={<StorageIcon />} iconPosition="start" {...a11yProps(3)} />
          </Tabs>
        </Paper>

        {/* Tab Content */}
        <TabPanel value={activeTab} index={0}>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 3 }}>
            {/* Active Alerts */}
            <Box>
              <Card>
                <CardHeader
                  title="Active Alerts"
                  subheader="Current system alerts requiring attention"
                />
                <CardContent>
                  {alertsLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                      <CircularProgress />
                    </Box>
                  ) : alerts && alerts.length > 0 ? (
                    <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
                      {alerts.slice(0, 10).map((alert) => (
                        <Box 
                          key={alert.id} 
                          sx={{ 
                            p: 2, 
                            mb: 1, 
                            borderRadius: 1, 
                            bgcolor: 'grey.50',
                            '&:hover': { bgcolor: 'grey.100' },
                            cursor: 'pointer'
                          }}
                          onClick={() => setSelectedAlert(alert)}
                        >
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Chip
                                icon={getPriorityIcon(alert.priority)}
                                label={alert.priority}
                                size="small"
                                color={getPriorityColor(alert.priority) as any}
                              />
                              <Typography variant="subtitle2">{alert.title}</Typography>
                            </Box>
                            <Typography variant="caption" color="text.secondary">
                              {format(new Date(alert.triggered_at), 'HH:mm')}
                            </Typography>
                          </Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            {alert.message}
                          </Typography>
                        </Box>
                      ))}
                    </Box>
                  ) : (
                    <Box sx={{ textAlign: 'center', py: 4 }}>
                      <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 1 }} />
                      <Typography>No active alerts</Typography>
                      <Typography variant="body2" color="text.secondary">
                        System is operating normally
                      </Typography>
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>

            {/* Alert Distribution */}
            <Box>
              <Card>
                <CardHeader
                  title="Alert Distribution"
                  subheader="Distribution of alerts by priority"
                />
                <CardContent>
                  {alertsLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                      <CircularProgress />
                    </Box>
                  ) : (
                    <Box sx={{ height: 300 }}>
                      <Doughnut 
                        data={alertDistributionData} 
                        options={{ 
                          responsive: true, 
                          maintainAspectRatio: false,
                          plugins: {
                            legend: {
                              position: 'bottom',
                            }
                          }
                        }} 
                      />
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>

        <TabPanel value={activeTab} index={1}>
          <Card>
            <CardHeader
              title="Alert Management"
              subheader="View and manage system alerts"
            />
            <CardContent>
              {alertsLoading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                  <CircularProgress />
                </Box>
              ) : alerts && alerts.length > 0 ? (
                <Box sx={{ maxHeight: 600, overflow: 'auto' }}>
                  {alerts.map((alert) => (
                    <Box 
                      key={alert.id} 
                      sx={{ 
                        p: 2, 
                        mb: 2, 
                        borderRadius: 1, 
                        border: 1, 
                        borderColor: 'divider',
                        '&:hover': { bgcolor: 'grey.50' }
                      }}
                    >
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Chip
                            icon={getPriorityIcon(alert.priority)}
                            label={alert.priority}
                            size="small"
                            color={getPriorityColor(alert.priority) as any}
                          />
                          <Typography variant="h6">{alert.title}</Typography>
                        </Box>
                        <Typography variant="caption" color="text.secondary">
                          {format(new Date(alert.triggered_at), 'MMM dd, HH:mm')}
                        </Typography>
                      </Box>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        {alert.message}
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                        {alert.tags.map((tag, index) => (
                          <Chip key={index} label={tag} size="small" variant="outlined" />
                        ))}
                      </Box>
                    </Box>
                  ))}
                </Box>
              ) : (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 1 }} />
                  <Typography>No alerts</Typography>
                  <Typography variant="body2" color="text.secondary">
                    System is operating normally with no active alerts
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </TabPanel>

        <TabPanel value={activeTab} index={2}>
          <Box>
            <Box>
              <Card>
                <CardHeader
                  title="Performance Metrics"
                  subheader="Response time and error rate trends"
                />
                <CardContent>
                  {dataLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                      <CircularProgress />
                    </Box>
                  ) : (
                    <Box sx={{ height: 400 }}>
                      <Line 
                        data={performanceData} 
                        options={{ 
                          responsive: true, 
                          maintainAspectRatio: false,
                          scales: {
                            y: {
                              beginAtZero: true
                            }
                          }
                        }} 
                      />
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>

        <TabPanel value={activeTab} index={3}>
          <Box>
            <Box>
              <Card>
                <CardHeader
                  title="Resource Usage"
                  subheader="CPU and memory utilization trends"
                />
                <CardContent>
                  {dataLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                      <CircularProgress />
                    </Box>
                  ) : (
                    <Box sx={{ height: 400 }}>
                      <Line 
                        data={resourceData} 
                        options={{ 
                          responsive: true, 
                          maintainAspectRatio: false,
                          scales: {
                            y: {
                              beginAtZero: true,
                              max: 100
                            }
                          }
                        }} 
                      />
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>
      </Box>
    </Container>
  );
};

export default MonitoringDashboard;